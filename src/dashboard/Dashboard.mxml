<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:dashboard="dashboard.*"
			   width="940" height="570" minWidth="940" minHeight="550"
			   applicationComplete="appComplete()"
			   >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:RadioButtonGroup id="tabButtons" 
							itemClick="handleTabButton(event);"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.events.ItemClickEvent;
			
			import spark.components.Button;
			import spark.components.RadioButton;
			
			private var tabs:Array = [];

			public static function textFlowify (string:String):String{
				return "<TextFlow version='2.0.0' xmlns='http://ns.adobe.com/textLayout/2008'><p>" + string + "<span /></p></TextFlow>";
			}
			
			import spark.components.VGroup;
                private function appComplete():void {
                    
                    var configpath:String = parameters['config'];
                    if ((configpath == null) || (configpath == "")) {
                        configpath = "../testdata/dashboard.xml";
                    }
                    
                    var loader:URLLoader = new URLLoader();
                    loader.dataFormat = "text";
                    loader.addEventListener( Event.COMPLETE,
                        function(event:Event):void {
                            var dashboardXML:XML = new XML(event.target.data);
                            var globalMuglOverrides:XML = dashboardXML.mugloverrides[0];
                            var timelineMugl:XML = dashboardXML.timeline[0].mugl[0];
                            var timelineMuglOverrides:XML = dashboardXML.timeline[0].mugloverrides[0];
                            for (var i:int = 0; i<dashboardXML.tab.length(); ++i) {
                                var tabTitle:String = contentsAsXMLString(dashboardXML.tab[i].title[0]);
                                var tabMuglOverrides:XML = dashboardXML.tab[i].mugloverrides[0];
								var tabButton:RadioButton = new RadioButton();
								tabButton.group = tabButtons; //<s:RadioButton group="{tabButtons}" value="0" label="Climate Change"/>
								tabButton.value = i;
								tabButton.label = tabTitle;
								tabButton.setStyle("skinClass", TabRadioButtonSkin);
								header.addElement(tabButton);
								
								var tab:Tab = new Tab();
                                tab.timelineMugl = applyXMLOverrides(new XML(timelineMugl), [globalMuglOverrides, tabMuglOverrides, timelineMuglOverrides]);
                                tab.timeSliderMin         = tab.timelineMugl.horizontalaxis[0].pan[0].@min;
                                tab.timeSliderMax         = tab.timelineMugl.horizontalaxis[0].pan[0].@max;
                                tab.timeSliderSelectedMin = tab.timelineMugl.horizontalaxis[0].@min;
                                tab.timeSliderSelectedMax = tab.timelineMugl.horizontalaxis[0].@max;
								tabs.push(tab);
                                if (dashboardXML.tab[i].graph.length() === 1) {
                                    tab.singleGraph = true;
                                }
                                body.addElement(tab);

                                for (var j:int=0; j<dashboardXML.tab[i].graph.length(); ++j) {
									var graphTitle:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].title[0]);
									var graphTitleLineCount = 1;
									/*
									if (dashboardXML.tab[i].graph[j].title[0].@lineCount) {
										graphTitleLineCount = int(dashboardXML.tab[i].graph[j].title[0].@lineCount);
									}
									*/
									var graphDescription:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].description[0]);
									var graphShortTitle:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].shorttitle[0]);
									var graphHelp:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].help[0]);
									var stat1Title:String = null;
									var stat1Value:String = null;
									var stat1ValueColor:String = null;
									var stat2Title:String = null;
									var stat2Value:String = null;
									var stat2ValueColor:String = null;

									if (dashboardXML.tab[i].graph[j].stats[0]) {
										if (dashboardXML.tab[i].graph[j].stats[0].stat) {
											stat1Title = contentsAsXMLString(dashboardXML.tab[i].graph[j].stats[0].stat[0].title[0]);
											stat1Value = contentsAsXMLString(dashboardXML.tab[i].graph[j].stats[0].stat[0].value[0]);
											stat1ValueColor = dashboardXML.tab[i].graph[j].stats[0].stat[0].value[0].@color;
										}
										if (dashboardXML.tab[i].graph[j].stats[0].stat[1]) {
											stat2Title = contentsAsXMLString(dashboardXML.tab[i].graph[j].stats[0].stat[1].title[0]);
											stat2Value = contentsAsXMLString(dashboardXML.tab[i].graph[j].stats[0].stat[1].value[0]);
											stat2ValueColor = dashboardXML.tab[i].graph[j].stats[0].stat[1].value[0].@color;
										}
									}

									var landingPageLink:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].link[0]);
                                    var muglurl:String = dashboardXML.tab[i].graph[j].mugl[0].@location;
                                    var mugl:XML = dashboardXML.tab[i].graph[j].mugl[0];
									
									var legendTitle:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].legendtitle[0]);
									var legendText:String  = contentsAsXMLString(dashboardXML.tab[i].graph[j].legendtext[0]);
									var legendItems:Array = [];
									if (dashboardXML.tab[i].graph[j].legend[0]) {
										for (var k:int = 0; k<dashboardXML.tab[i].graph[j].legend[0].item.length(); ++k) {
											legendItems.push({'img' : dashboardXML.tab[i].graph[j].legend[0].item[k].img[0].@src,
											              	  'text' : contentsAsXMLString(dashboardXML.tab[i].graph[j].legend[0].item[k].text[0])});
										}
									}
									tab.addGraph(graphTitle, graphShortTitle,
												 graphTitleLineCount,
												 graphDescription,
												 graphHelp,  landingPageLink,
												 stat1Title, stat1Value, stat1ValueColor,
												 stat2Title, stat2Value, stat2ValueColor,
												 legendTitle, legendText, legendItems,
                                                 muglurl,    mugl,
                                                 [globalMuglOverrides, tabMuglOverrides]);
                                }
                            }
							selectTab(0);

                        });
                    loader.load( new URLRequest(configpath) );
                }

                public static function applyXMLOverrides(target:XML, overrides:*):XML {
                    if (overrides == null) {
                        return target;
                    }
                    if (overrides is XML) {
                        var overridesXML:XML = overrides as XML;
                        for each (var e:XML in overridesXML.elements("attribute")) {
                            var attrName:String  = e.@name;
                            var attrValue:String = e.@value;
                            target['@'+attrName] = attrValue;
                        }
                        for each (var e:XML in overridesXML.elements("element")) {
                            var elementName:String  = e.@name;
                            var elementAction:String = e.@action;
                            var targetChildList:XMLList = target.child(elementName);
                            if (targetChildList == null || targetChildList.length()==0) {
                                target.appendChild(new XML("<"+elementName+"/>"));
                            } else if (elementAction == "empty") {
                                target[elementName] = new XML("<"+elementName+"/>");
                            }
                            applyXMLOverrides(target[elementName][0], e);
                        }
                        for each (var e:XML in overridesXML.elements("elements")) {
                            var elementName:String = e.@name;
                            for each (var descendant:XML in target.descendants(elementName)) {
                                for each (var f:XML in e.elements("attribute")) {
                                    var attrName:String  = f.@name;
                                    var attrValue:String = f.@value;
                                    descendant['@'+attrName] = attrValue;
                                }
                            }
                        }
                    } else if (overrides is Array) {
                        for each (var o:Object in overrides) {
                            applyXMLOverrides(target, o);
                        }
                    }
                    return target;
                }

                private function contentsAsXMLString(xml:XML):String {
					if (xml === null) { return null; }
                    var xmlString:String = "";
                    for each (var child:XML in xml.children()) {
                        xmlString += child.toXMLString();
                    }
                    return xmlString;
                }
			
				private function handleTabButton(event:ItemClickEvent):void {
					selectTab(int(tabButtons.selectedValue));
				}
			
				private function selectTab(tab_num:int):void {
					tabButtons.selectedValue = tab_num;
					for (var i:int = 0; i<tabs.length; ++i) {
						tabs[i].visible = false;
					}
					tabs[tab_num].visible = true;
				}

		]]>
	</fx:Script>
  <s:BorderContainer id="body" cornerRadius="15" backgroundColor="#5A5B5B" width="100%" height="100%">
	<s:HGroup x="10" y="10" gap="18">
		<s:Label fontSize="28" text="Global Climate Dashboard"/>
		<s:Group id="header">
		  <s:layout>
			<s:TileLayout requestedRowCount="1"/>
		  </s:layout>
		  <!--
		     tab selection buttons get inserted here, e.g:
		       <s:RadioButton group="{tabButtons}" value="0" label="Climate Change"/>
		  -->
		</s:Group>
	</s:HGroup>
	  <!--
	  	tabs get inserted here:
	      <dashboard:Tab>
	  -->
  </s:BorderContainer>
</s:Application>
