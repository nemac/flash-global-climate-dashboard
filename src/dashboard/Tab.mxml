<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  x="10"
		  y="51"
		  width="918"
          creationComplete="init()"
		  visible="false" xmlns:multigraph="multigraph.*" xmlns:dashboard="dashboard.*"
		  >
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
import multigraph.Axis;
import multigraph.AxisEvent;
import multigraph.format.DateFormatter;

import spark.components.Button;
import spark.components.ToggleButton;

private var graphCount:int = 0;

[Bindable]public var timelineMugl:XML;

private var graphContainers:Array = [];
private var graphButtons:Array = [];

[Bindable]public var timeSliderMin:Number;
[Bindable]public var timeSliderMax:Number;
[Bindable]public var timeSliderSelectedMin:Number;
[Bindable]public var timeSliderSelectedMax:Number;
[Bindable]public var timeSliderLabels:String = null;

[Bindable]public var singleGraph:Boolean = false;

protected var multigraphDateFormatter : DateFormatter = new DateFormatter("%Y");

protected function init():void
{
	// I'm not sure which of these is actually needed, but having one or more of them
	// here seems to fix (I hope!) the problem of the time slider sometimes not being
	// correctly initialized. --mbp
	executeBindings(true);
	//executeChildBindings(true);
	this.timeslider.executeBindings(true);
    //legendTitleFlow = TextConverter.importToFlow(textFlowify(legendTitle), TextConverter.TEXT_LAYOUT_FORMAT);
    //legendTextFlow      = TextConverter.importToFlow(textFlowify(legendText), TextConverter.TEXT_LAYOUT_FORMAT);
}

private function displayGraph(i:int):void {
	//if (!graphGroup.containsElement(graphContainers[i])) {
	if (!graphGroup.contains(graphContainers[i])) {
		var j:int = 0;
		while (j<graphContainers.length && (graphGroup.getChildAt(2) !== graphContainers[j])) {
			++j;
		}
		graphGroup.removeElementAt(2);
		graphButtons[j].selected = false;
		graphButtons[j].enabled = true;
		graphContainers[j].closeHelp();
		graphGroup.addElementAt(graphContainers[i], 0);
		graphButtons[i].enabled = false;
	}
}

public function addGraph(titleText:String,  shortTitleText:String,
    titleLineCount:int,											
	descriptionText:String,										
	helpText:String,   landingPageLink:String,
	stat1Title:String, stat1Value:String, stat1ValueColor:String,
	stat2Title:String, stat2Value:String, stat2ValueColor:String,
	legendTitle:String, legendText:String, legendItems:Array,
    muglurl:String,    mugl:XML,
    muglOverrides:Array):void {

	var button:ToggleButton;
    if (!singleGraph) {
	    button = new ToggleButton();
	    button.setStyle("skinClass", GraphToggleButtonSkin);
	    button.label = shortTitleText;
	    var i:int = graphCount;
	    button.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
			    displayGraph(i);
		    });
	    buttonGroup.addElement(button);
	    graphButtons.push(button);
    }

	var graphContainer:GraphContainer = new GraphContainer();
	graphContainer.titleText = titleText;
	if (titleLineCount > 0) {
		graphContainer.titleLineCount = titleLineCount;
	}
	graphContainer.descriptionText = descriptionText;
	graphContainer.helpText = helpText;
	graphContainer.stat1Title = stat1Title;
	graphContainer.stat1Value = stat1Value;
	if (stat1ValueColor) {
		graphContainer.stat1ValueColor = uint(stat1ValueColor);
	}
	graphContainer.stat2Title = stat2Title;
	graphContainer.stat2Value = stat2Value;
	if (stat2ValueColor) {
		graphContainer.stat2ValueColor = uint(stat2ValueColor);
	}
	graphContainer.legendTitle = legendTitle;
	graphContainer.legendText = legendText;
	graphContainer.legendItems = legendItems;
	graphContainer.landingPageLink = landingPageLink;
	graphContainer.mugloverrides = muglOverrides;
	
	graphContainer.addEventListener("MULTIGRAPH_OVER", multigraphMouseOver);
	graphContainer.addEventListener("MULTIGRAPH_OUT", multigraphMouseOut);

    if (muglurl) {
        graphContainer.muglurl = muglurl;
    } else {
        graphContainer.mugl = mugl;
    }

	if (graphCount==0) {
		graphContainer.addEventListener(AxisEvent.CHANGE, handleAxisChange);
	}

	graphContainers.push(graphContainer);

    if (singleGraph) {
        graphContainer.height = 450;
    }

	if (graphCount<3) {
		graphGroup.addElement(graphContainer);
        if (!singleGraph) {
		    button.selected = true;
		    button.enabled = false;
        }
	}
	++graphCount;
}

protected function sliderChange(event:TimeSliderEvent) {
	//trace('sliderChange('+event.min+', '+event.max+') => axisValues('+a+', '+b+')');
	var a:Number = yearIntToAxisDateValue(event.min);
	var b:Number = yearIntToAxisDateValue(event.max);
	for each (var graphContainer:GraphContainer in graphContainers) {
		var mg:Multigraph = graphContainer.getMultigraph();
		if (mg != null) {
			var graphs:Array = mg.graphs;
			var axes:Array = graphs[0].axes;
			var axis:Axis = axes[0];
			axis.setDataRange(a, b,false);
			// note: 'false' as the 3rd arg tells setDataRange not to dispatch an AxisEvent, which is important
			// here to prevent an adverse feedback loop coming from the fact that we're listening for those
			// events here in this class and calling this function (sliderChange) in response to them.
			break;
			// only set the data range on the first graph in this tab!!!  The others
	        // will autoadjust to it via the axis bindings in Multigraph.
		}
	}
	//trace('slider set to: ' + event.min + ', ' + event.max);
}

private function yearIntToAxisDateValue( year : int ) : Number {
	return multigraphDateFormatter.parse( year+'' );
}

private function axisDateValueToYearInt( axisValue : Number ) : int {
	return parseInt( multigraphDateFormatter.format( axisValue ) );
}

private function handleAxisChange(event:AxisEvent):void {
	var a:Number = axisDateValueToYearInt(event.min);
	var b:Number = axisDateValueToYearInt(event.max);
	timeslider.selectedMinValue = a;
	timeslider.selectedMaxValue = b;
}

			private function multigraphMouseOver(event:Event):void {
				this.multigraphInteractionHelpText.visible = true;
				this.timeSliderInteractionHelpText.visible = false;
			}
			private function multigraphMouseOut(event:Event):void {
				this.multigraphInteractionHelpText.visible = false;
			}
			private function timeSliderMouseOver(event:Event):void {
				this.timeSliderInteractionHelpText.visible = true;
				this.multigraphInteractionHelpText.visible = false;
			}
			private function timeSliderMouseOut(event:Event):void {
				this.timeSliderInteractionHelpText.visible = false;
			}
			
		]]>
	</fx:Script>
	<!--
		each tab contains up to 3 NewGraphContainers:
		<dashboard:NewGraphContainer ... />
		followed by one ...
	-->
	<s:VGroup id="graphGroup" width="100%">
      
	</s:VGroup>
	
	<s:BorderContainer borderVisible="false"  width="100%" height="52"
					   backgroundAlpha="0">
      <!--
          ** NOTE: the x="4" value on the following multigraph is a trial-and-error fudge factor used to get the timeline to correctly line
          **       up with the other graphs.  If the size, position, or margins of the other graphs are changed, this will probably need
          **       to be adjusted.
      -->
      <s:VGroup width="560" right="6">
        <multigraph:Multigraph id="timeline" mugl="{timelineMugl}"
                               width="560" height="20"
							   mouseOver="multigraphMouseOver(event)"
							   mouseOut="multigraphMouseOut(event)"
							   />
        <dashboard:TimeSlider id="timeslider"
                              minValue="{timeSliderMin}"
                              maxValue="{timeSliderMax}"
                              selectedMinValue="{timeSliderSelectedMin}"
                              selectedMaxValue="{timeSliderSelectedMax}"
                              labels="{timeSliderLabels}"
                              height="25" width="560"
							  mouseOver="timeSliderMouseOver(event)"
							  mouseOut="timeSliderMouseOut(event)"
							  change="sliderChange(event)"/>
      </s:VGroup>
		
		<s:Label id="multigraphInteractionHelpText" visible="false"
				 x="15" y="10" width="340"
				 color="#BBBBBB" fontSize="14" >Click and drag any graph to change the timeline.</s:Label>
		<s:Label id="timeSliderInteractionHelpText" visible="false"
				 x="15" y="10" width="340"
				 color="#BBBBBB" fontSize="14" >Drag the ends of the amber region to change the graph time scale.</s:Label>
		
	</s:BorderContainer>

	<s:Group id="buttonGroup" width="100%">
      <s:layout>
        <s:TileLayout/>
      </s:layout>
	</s:Group>

</s:VGroup>
