<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:dashboard="dashboard.*"
				   cornerRadius="10"
				   backgroundColor="#232020"
                   width="100%"
                   height="110"
				   creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
    <fx:Style>
        @namespace s "library://ns.adobe.com/flex/spark";
		.helptext {
			fontSize: 14pt;
		}
		.lightClickable {
            /*
			textDecoration: underline;  
			color: #A9A9A9;
            */
			color: #888888;
		}
		.lightClickableOver {
            /*
			textDecoration: underline;
            */
			color: #ffffff;
		}
    </fx:Style>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			import multigraph.AxisEvent;
			import multigraph.Multigraph;

            [Event(name="change", type="Event")]

			[Bindable]public var titleText:String;
			[Bindable]public var titleLineCount:int = 2;
			[Bindable]public var descriptionText:String;
			[Bindable]public var helpText:String;
			[Bindable]public var stat1Title:String;
			[Bindable]public var stat1Value:String;
			[Bindable]public var stat1ValueColor:uint = 0xF8A792;
			[Bindable]public var stat2Title:String;
			[Bindable]public var stat2Value:String;
			[Bindable]public var stat2ValueColor:uint = 0xF8A792;
			
			[Bindable]public var legendTitle:String = null;
			[Bindable]public var legendText:String;
			[Bindable]public var legendItems:Array = [];
			
			[Bindable]public var landingPageLink:String = "about:blank";
			[Bindable]public var muglurl:String = null;
			[Bindable]public var mugl:XML= null;
			[Bindable]public var mugloverrides:Object = null;

			[Bindable]private var _titleTextFlow:TextFlow = null;
			[Bindable]private var _descriptionTextFlow:TextFlow = null;
			[Bindable]private var _helpTextFlow:TextFlow = null;
			[Bindable]private var _legendTextFlow:TextFlow = null;
			[Bindable]private var _descriptionYPosition:int = 50;
			
			private function init():void {
				_titleTextFlow = TextConverter.importToFlow(Dashboard.textFlowify(titleText), TextConverter.TEXT_LAYOUT_FORMAT);
				_descriptionTextFlow = TextConverter.importToFlow(Dashboard.textFlowify(descriptionText), TextConverter.TEXT_LAYOUT_FORMAT);
				_helpTextFlow = TextConverter.importToFlow(Dashboard.textFlowify(helpText), TextConverter.TEXT_LAYOUT_FORMAT);
				_legendTextFlow = TextConverter.importToFlow(Dashboard.textFlowify(legendText), TextConverter.TEXT_LAYOUT_FORMAT);
				if (titleLineCount < 2) {
					_descriptionYPosition = 37;
				}
			}

			
			public function learnMoreClicked():void {
				//displayHelp();
				navigateToLandingPage();
			}
			public function helpMoreDetailsClicked():void {
				navigateToLandingPage();
			}
			
			private function displayHelp():void {
				help.visible = true;
			}
			public function closeHelp():void {
				help.visible = false;
			}
			protected function navigateToLandingPage():void
			{
				var req:URLRequest = new URLRequest(landingPageLink);
				navigateToURL(req,"_blank");
			}
			
			
			private function lightRoll(event:MouseEvent):void {
				if (event.type == MouseEvent.MOUSE_OVER) {
					event.target.styleName = "lightClickableOver";
				} else {
					event.target.styleName = "lightClickable";
				}
			}

			private function boldRoll(event:MouseEvent):void {
				if (event.type == MouseEvent.MOUSE_OVER) {
					event.target.setStyle("fontWeight", "bold");
				} else {
					event.target.setStyle("fontWeight", "normal");
				}
			}
			private function handleAxisChange(event:AxisEvent):void {
				dispatchEvent(new AxisEvent(event.type, event.min, event.max));
			}

			public function getMultigraph():Multigraph {
				return theMultigraph;
			}

			override protected function createChildren():void {
				super.createChildren();
				
				if (this.legendTitle !== null) {
					this.legendBlock.visible = true;
					this.descriptionRichEditableText.visible = false;
				} else {
					this.legendBlock.visible = false;
					this.legendBlock.height = 0;
				}
				
				for (var i:int=0; i<this.legendItems.length; ++i) {
					var item:dashboard.LegendItem = new dashboard.LegendItem();
					item.source = legendItems[i].img;
					item.text = legendItems[i].text;
					legend.addElement(item);
				}
				
			}
			
			private function multigraphMouseOver():void {
				this.dispatchEvent(new Event("MULTIGRAPH_OVER"));
				//trace('mg over');
			}
			private function multigraphMouseOut():void {
				this.dispatchEvent(new Event("MULTIGRAPH_OUT"));
				//trace('mg out');
			}

]]>
	</fx:Script>

	<s:RichEditableText x="10" y="10" editable="false" enabled="false" focusEnabled="false"
						width="330"
						color="#FFFFFF" fontSize="16"   textFlow="{_titleTextFlow}"/>
	<s:RichEditableText id="descriptionRichEditableText"  
		x="10" y="{_descriptionYPosition}" editable="false" enabled="false" focusEnabled="false"
		width="330"
		color="#888888" fontSize="14"   textFlow="{_descriptionTextFlow}"/>
	<!--
	<dashboard:GraphStat x="26" y="38" title="{stat1Title}" value="{stat1Value}" valueColor="{stat1ValueColor}"/>
	<dashboard:GraphStat x="26" y="62" title="{stat2Title}" value="{stat2Value}" valueColor="{stat2ValueColor}"/>
	-->

	<s:BorderContainer id="legendBlock" visible="false" backgroundAlpha="0" borderVisible="false"  x="0" y="35" width="350" height="375">
	  <s:BorderContainer x="70" y="30" backgroundColor="#ffffff" cornerRadius="10" borderVisible="false">
		  <s:VGroup id="legend" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="8"/>
	  </s:BorderContainer>		
	  <s:Label x="0" y="170" width="100%" fontSize="16" fontWeight="bold" text="{legendTitle}" color="#ffffff"
			   textAlign="center"/>
	  <s:RichEditableText x="0" y="210" width="100%" paddingLeft="25" paddingRight="20" color="#888888" editable="false" enabled="false"
						  focusEnabled="false" fontSize="14" textFlow="{_legendTextFlow}"/>
	</s:BorderContainer>

	<s:Label id="learnMore" x="260" y="{height-20}" fontSize="12" fontWeight="bold" text="Learn More &gt;&gt;"
			 styleName="lightClickable"
			 buttonMode="true" useHandCursor="true" mouseChildren="false" click="learnMoreClicked()"
			 mouseOver="lightRoll(event)" mouseOut="lightRoll(event)"/>
    <dashboard:CustomizedMultigraph id="theMultigraph" muglurl="{muglurl}" mugl="{mugl}" mugloverrides="{mugloverrides}"
                                    change="handleAxisChange(event)" outlined="false"
                                    x="350" y="3"
                                    width="560" height="{height-8}"
									 mouseOver="multigraphMouseOver()"
									 mouseOut="multigraphMouseOut()"
									/>
	<s:BorderContainer id="help" cornerRadius="5" backgroundAlpha=".95" backgroundColor="#ffffff" visible="false"
                       left="5" top="5" right="5" bottom="5"
                       x="0" y="0" borderVisible="false">
      <s:RichEditableText editable="false" focusEnabled="false" x="5" y="0"
                          textFlow="{_helpTextFlow}"
                          styleName="helptext"
                          width="800"
                          paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5"
                          verticalCenter="0"/>
      <s:Group top="3" right="5" >
        <s:Label id="close" x="0" y="4" text="Close" color="#000000" fontSize="11"
                 buttonMode="true" click="closeHelp()"
                 mouseOver="boldRoll(event)" mouseOut="boldRoll(event)"/>
        <s:Button x="33" y="0" label="Ã—" width="15" height="15" skinClass="dashboard.CloseButtonSkin"
                  fontSize="14" buttonMode="true" click="closeHelp()"/>
      </s:Group>
      <s:Label right="10" bottom="5" text="More Details &gt;&gt;" color="#000000" fontSize="12"
               buttonMode="true" click="helpMoreDetailsClicked()"
               mouseOver="boldRoll(event)" mouseOut="boldRoll(event)"/>
	</s:BorderContainer>

</s:BorderContainer>
