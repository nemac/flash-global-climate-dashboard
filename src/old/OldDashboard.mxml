<s:Application name="Spark_Panel_controlBar_test"
			   xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/halo"
			   xmlns:dashboard="dashboard.*" 
			   xmlns:flexlib="http://code.google.com/p/flexlib/"
			   xmlns:sliderClasses="flexlib.controls.sliderClasses.*"
			   xmlns:mx1="library://ns.adobe.com/flex/mx" backgroundColor="#FFFFFF" height="700"
			   applicationComplete="appComplete()"
			   >
	<fx:Style source="Dashboard.css"/>
  <fx:Script>
    <![CDATA[
import flash.filters.DropShadowFilter;

import flashx.textLayout.*;
import flashx.textLayout.conversion.TextConverter;
import flashx.textLayout.edit.IEditManager;
import flashx.textLayout.formats.BackgroundColor;

import mx.core.IUIComponent;
import mx.core.IVisualElement;
import mx.events.DragEvent;
import mx.managers.DragManager;

import skins.mainHelpSkin;

import spark.components.Button;
import spark.layouts.VerticalLayout;
import spark.skins.spark.PanelSkin;
import spark.utils.TextFlowUtil;
import flashx.textLayout.elements.TextFlow;


public var proxyForCollapsedGraphVisible:Boolean = false;

public var mouseOverBehavior:Boolean = false;

private function appComplete():void {
    
    var configpath:String = parameters['config'];
    if ((configpath == null) || (configpath == "")) {
        configpath = "assets/dashboard.xml";
    }
    
    var loader:URLLoader = new URLLoader();
    loader.dataFormat = "text";
    loader.addEventListener( Event.COMPLETE,
        function(event:Event):void {
            var dashboardXML:XML = new XML(event.target.data);
            var globalMuglOverrides:XML = dashboardXML.mugloverrides[0];
            var timelineMugl:XML = dashboardXML.timeline[0].mugl[0];
            var timelineMuglOverrides:XML = dashboardXML.timeline[0].mugloverrides[0];
            
            //processMugl(timelineMugl);
            
            for (var i:int = 0; i<dashboardXML.tab.length(); ++i) {
                var tabTitle:String = contentsAsXMLString(dashboardXML.tab[i].title[0]);
                //trace('constructing tab: ' + tabTitle);
                var nc:spark.components.NavigatorContent = new  spark.components.NavigatorContent();
                nc.label = tabTitle;
                nc.percentWidth  = 100;
                nc.percentHeight = 100;
                tabStack.addElement(nc);
                var tabContainer:TabContainer;
                if (dashboardXML.tab[i].@container == "Tab1SlotContainer") {
                    tabContainer = new TabContainer();
                    tabContainer.graphHeight           = 345;
                    tabContainer.numberOfExpandedSlots = 1;
                    tabContainer.totalNumberOfSlots    = 1;
                    (tabContainer as TabContainer).legendTitle = contentsAsXMLString(dashboardXML.tab[i].graph[0].legendtitle[0]);
                    (tabContainer as TabContainer).legendText  = contentsAsXMLString(dashboardXML.tab[i].graph[0].legendtext[0]);
                    for (var j:int=0; j<dashboardXML.tab[i].legend[0].item.length(); ++j) {
                        (tabContainer as TabContainer).addLegendItem(dashboardXML.tab[i].legend[0].item[j].img[0].@src,
                            contentsAsXMLString(dashboardXML.tab[i].legend[0].item[j].text[0]));
                    }
                    (tabContainer as TabContainer).dragHandleVisible = false;
                    (tabContainer as TabContainer).helpHandleVisible = true;
                } else {
                    tabContainer = new TabContainer();
                    tabContainer.numberOfExpandedSlots = 3;
                    tabContainer.totalNumberOfSlots    = 10;
                }
                
                tabContainer.mainContainer = mainContainer;

                var tabMuglOverrides:XML = dashboardXML.tab[i].mugloverrides[0];
                var newXML = new XML(timelineMugl);
                //dashboardTabContent.timelineMugl = applyXMLOverrides(new XML(timelineMugl), [globalMuglOverrides, tabMuglOverrides, timelineMuglOverrides]);
                tabContainer.timelineMugl = applyXMLOverrides(newXML, [globalMuglOverrides, tabMuglOverrides, timelineMuglOverrides]);
                tabContainer.timeSliderMin         = tabContainer.timelineMugl.horizontalaxis[0].pan[0].@min;
                tabContainer.timeSliderMax         = tabContainer.timelineMugl.horizontalaxis[0].pan[0].@max;
                tabContainer.timeSliderSelectedMin = tabContainer.timelineMugl.horizontalaxis[0].@min;
                tabContainer.timeSliderSelectedMax = tabContainer.timelineMugl.horizontalaxis[0].@max;
                if (dashboardXML.tab[i].timeslider[0].@labels) {
                    tabContainer.timeSliderLabels      = dashboardXML.tab[i].timeslider[0].@labels;
                } else {
                    tabContainer.timeSliderLabels      = null;
                }

                nc.addElement(tabContainer);

                for (var j:int=0; j<dashboardXML.tab[i].graph.length(); ++j) {
                    var graphTitle:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].title[0]);
                    //trace('adding graph "' + graphTitle + '"');
                    var helpText:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].help[0]);
                    //trace(' help text: ' + helpText);
                    var rmLink:String = contentsAsXMLString(dashboardXML.tab[i].graph[j].link[0]);
                    //trace('link: ' + rmLink);

                    var graphContainer:GraphContainer = tabContainer.addGraph(graphTitle, helpText, rmLink);
                    graphContainer.rmLink = rmLink;
                    graphContainer.mugloverrides = [globalMuglOverrides, tabMuglOverrides];
                    if (dashboardXML.tab[i].@container == "Tab1SlotContainer") {
                        graphContainer.helpBorderContainerHeight = 328;
                        graphContainer.helpContentHeight         = 328;
                        graphContainer.readMoreButtonTop         = 310;
                    } else {
                        graphContainer.helpBorderContainerHeight =  90;
                        graphContainer.helpContentHeight         =  90;
                        graphContainer.readMoreButtonTop         =  70;
                    }

                    if ('@location' in dashboardXML.tab[i].graph[j].mugl[0]) {
                        graphContainer.muglurl = dashboardXML.tab[i].graph[j].mugl[0].@location;
                    } else {
                        graphContainer.mugl = dashboardXML.tab[i].graph[j].mugl[0];
                    }
                }
            }

            var mainIntro:String = contentsAsXMLString(dashboardXML.intro[0]);
            //introText.textFlow = TextConverter.importToFlow(textFlowify(mainIntro), TextConverter.TEXT_LAYOUT_FORMAT);
            introText.textFlow = TextConverter.importToFlow(mainIntro, TextConverter.TEXT_LAYOUT_FORMAT);

        });
    loader.load( new URLRequest(configpath) );

}

private function contentsAsXMLString(xml:XML):String {
    var xmlString:String = "";
    for each (var child:XML in xml.children()) {
        xmlString += child.toXMLString();
    }
    return xmlString;
}

protected function textFlowify (string:String):String{
    return "<TextFlow version='2.0.0' xmlns='http://ns.adobe.com/textLayout/2008'>" + string + "</TextFlow>";
}

protected function helpVisible(event:MouseEvent):void
{
    helpOverlay.visible = !helpOverlay.visible;
}

public static function applyXMLOverrides(target:XML, overrides:*):XML {
    if (overrides == null) {
        return target;
    }
    if (overrides is XML) {
        var overridesXML:XML = overrides as XML;
        for each (var e:XML in overridesXML.elements("attribute")) {
            var attrName:String  = e.@name;
            var attrValue:String = e.@value;
            target['@'+attrName] = attrValue;
        }
        for each (var e:XML in overridesXML.elements("element")) {
            var elementName:String  = e.@name;
            var elementAction:String = e.@action;
            var targetChildList:XMLList = target.child(elementName);
            if (targetChildList == null || targetChildList.length()==0) {
                target.appendChild(new XML("<"+elementName+"/>"));
            } else if (elementAction == "empty") {
                target[elementName] = new XML("<"+elementName+"/>");
            }
            applyXMLOverrides(target[elementName][0], e);
        }
        for each (var e:XML in overridesXML.elements("elements")) {
            var elementName:String = e.@name;
            for each (var descendant:XML in target.descendants(elementName)) {
                for each (var f:XML in e.elements("attribute")) {
                    var attrName:String  = f.@name;
                    var attrValue:String = f.@value;
                    descendant['@'+attrName] = attrValue;
                }
            }
        }
    } else if (overrides is Array) {
        for each (var o:Object in overrides) {
            applyXMLOverrides(target, o);
        }
    }
    return target;
}

    ]]>
	</fx:Script>


    <s:BorderContainer id="mainContainer" 
                       backgroundColor="#555599" 
                       cornerRadius="10" width="950" height="440" borderVisible="false">
      <mx1:ViewStack  left="0" right="0" bottom="0" top="5" id="tabStack">
		  <!--
          /**
           * NOTE: when the ActionScript code above parses the dashboard XML config
           * file, it adds one s:NavigatorContent child to this ViewStack for each
           * <tab> in the config file.  The structure of what gets added is like
           * the following - each NavigatorContent contains a single
           * Tab3SlotContainer or Tab1SlotContainer (both of which are subclasses
           * of TabContainer):
           */
		  <s:NavigatorContent width="100%" height="100%">
			  <dashboard:Tab3SlotContainer/>
		  </s:NavigatorContent>
		  <s:NavigatorContent width="100%" height="100%">
			  <dashboard:Tab3SlotContainer/>
		  </s:NavigatorContent>
		  <s:NavigatorContent width="100%" height="100%">
			  <dashboard:Tab1SlotContainer/>
		  </s:NavigatorContent>
		  -->
	  </mx1:ViewStack>
    </s:BorderContainer>

    <s:Label x="30" y="15" text="Global Climate Dashboard"
             color="#FFFFFF"
             fontSize="24" fontWeight="bold"/>
    <s:Label x="30" y="45" text="A data-driven quick look at the state of Earth's climate system"
             color="#FFFFFF"
             fontSize="14" fontWeight="normal"/>
	<s:ButtonBar x="50" y="150" 
                 dataProvider="{tabStack}" buttonMode="true" 
                 skinClass="skins.barSkin" />


	<s:BorderContainer id="helpOverlay" cornerRadius="0" backgroundAlpha=".5" backgroundColor="{this.backgroundColor}" visible="false"
					   width="{mainContainer.width}" height="{mainContainer.height}" x="{mainContainer.x}" y="{mainContainer.y}" borderVisible="false">
      <s:BorderContainer id="intro" cornerRadius="9" backgroundAlpha=".9" backgroundColor="0xEEEEEE" width="80%" horizontalCenter="0" verticalCenter="-115">
        <s:RichEditableText editable="false" focusEnabled="false" id="introText" x="0" y="0" paddingLeft="10" 
                            paddingRight="10" paddingTop="25" paddingBottom="25" maxWidth="360" verticalCenter="0"/>
        <s:Button label="×" right="10" top="5" skinClass="skins.mainHelpSkin" width="18" height="18" click="helpVisible(event)"  
                  fontSize="16" buttonMode="true"/>
      </s:BorderContainer>		
	</s:BorderContainer>

</s:Application>
